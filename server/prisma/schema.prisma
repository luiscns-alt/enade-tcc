// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  CLIENT
  ADMIN
  ROOT
}

enum Type {
  OBJECTIVE
  DISCURSIVE
}

model User {
  id             String   @id @default(uuid())
  login          String
  password       String
  name           String
  surname        String?
  role           Role     @default(CLIENT)
  questionnaires Quiz[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt

  gamification   UserGamification?
  gamificationId String?
  UserBadge      UserBadge[]

  @@map("user")
}

model UserGamification {
  id                       String      @id @default(uuid())
  points                   Int         @default(0)
  level                    Int         @default(0)
  dailyChallengesCompleted Int         @default(0)
  currentStreak            Int         @default(0)
  rewardPoints             Int         @default(0)
  lastQuizTaken            DateTime?
  quizzesCompleted         Int         @default(0)
  user                     User        @relation(fields: [userId], references: [id])
  userId                   String      @unique
  UserBadge                UserBadge[]

  @@map("user_gamification")
}

model Badge {
  id          String      @id @default(uuid())
  name        String
  description String
  users       UserBadge[]
}

model UserBadge {
  userId             String
  user               User             @relation(fields: [userId], references: [id])
  badgeId            String
  badge              Badge            @relation(fields: [badgeId], references: [id])
  date               DateTime         @default(now())
  userGamificationId String
  userGamification   UserGamification @relation(fields: [userGamificationId], references: [id])

  @@id([userId, badgeId])
}

model Category {
  id   String @id @default(uuid())
  name String
  quiz Quiz[]
}

model Quiz {
  id          String   @id @default(uuid())
  title       String
  description String?
  published   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  category   Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId String?

  question Question[]
}

model Question {
  id    String  @id @default(uuid())
  title String  @db.VarChar(2000)
  type  Type    @default(DISCURSIVE)
  image String?

  quiz   Quiz?   @relation(fields: [quizId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  quizId String?

  answers Answer[]
}

model Answer {
  id        String  @id @default(uuid())
  text      String
  isCorrect Boolean @default(value: false)

  question   Question? @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  questionId String?
}
